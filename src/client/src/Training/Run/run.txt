ai_params = {
    "wml_credentials": {
        "apikey": "${API_KEY}",
        "url": "${WML_ENDPOINT_URL}",
    },
    "bucket": "${BUCKET}",
    "labels_location": "${LABELS_LOCATION}",
    "cos_credentials": {
        "access_key_id": "${COS_ACCESS_KEY_ID}",
        "secret_access_key": "${COS_SECRET_ACCESS_KEY}",
        "endpoint_url": "${COS_ENDPOINT_URL}",
    },
    "space_id": "${SPACE_ID}",
    "model_deployment_id": "${DEPLOYMENT_ID}",
}
def my_deployable_function(params=ai_params):
    try:
        import subprocess

        subprocess.check_output(
            "pip install -U pillow",
            stderr=subprocess.STDOUT,
            shell=True,
        )

        import ibm_boto3

        cos = ibm_boto3.resource(
            "s3",
            aws_access_key_id=params["cos_credentials"]["access_key_id"],
            aws_secret_access_key=params["cos_credentials"]["secret_access_key"],
            endpoint_url=params["cos_credentials"]["endpoint_url"],
        )

        obj = cos.Object(
            params["bucket"],
            params["labels_location"],
        ).get()["Body"]

        class_names = obj.read().decode("utf-8").strip().split("\n")

    except subprocess.CalledProcessError as e:
        install_err = (
            "subprocess.CalledProcessError:\n\n"
            + "cmd:\n"
            + e.cmd
            + "\n\noutput:\n"
            + e.output.decode()
        )
        raise Exception("Installing failed:\n" + install_err)

    def score(function_payload):
        try:
            import io
            import base64
            from PIL import Image
            import numpy as np

            im = Image.open(
                io.BytesIO(
                    base64.decodebytes(
                        function_payload["input_data"][0]["values"][0].encode("utf-8")
                    )
                )
            )

            newsize = (224, 224)
            im = im.resize(newsize)

            arr = np.array(im) / 255.0
            arr = np.expand_dims(im, axis=0)

            model_payload = {"input_data": [{"values": arr}]}

            from ibm_watson_machine_learning import APIClient

            client = APIClient(params["wml_credentials"])
            client.set.default_space(params["space_id"])
            model_result = client.deployments.score(
                params["model_deployment_id"], model_payload
            )
            prediction = model_result["predictions"][0]["values"][0]

            scores = {}
            for i, name in enumerate(class_names):
                scores[name] = prediction[i]

            return {"predictions": [{"values": [{"scores": scores}]}]}

        except Exception as e:
            return {"predictions": [{"values": [{"error": repr(e)}]}]}

    return score


score = my_deployable_function()
